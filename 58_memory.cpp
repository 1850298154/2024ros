#include<iostream>
using namespace std;

//C++在程序运行时，将内存大方向分为四个区：
//1、代码区：存放函数体的二进制代码，由操作系统进行管理
//2、全局区：存放全局变量、静态变量和常量
//3、栈区：编译器自动分配和释放，存放函数的参数值、局部变量等
//4、堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收

//内存四区的意义：不同区域存放的数据，赋予不同的生命周期，增大编程灵活性

//
//代码区：生成exe文件后，在程序未执行前生成
//作用：
//存放CPU执行的机器代码
//共享：内存中只存在一份数据，多次执行访问同一份指令空间
//只读：防止程序意外地修改指令

//
//全局区：生成exe文件后，在程序未执行前生成
//作用：
//全局变量和静态变量存放在此
//还包含常量区、字符串区和其他常量（const）
//该区数据在程序结束后由操作系统进行释放

//创建全局变量
int g_a = 10;
int g_b = 10;
int g_c;

const char * pc = "hello worl";
const char * pc2 = "hello world";

//创建全局常量
const int c_g_a = 10;


static void sf(){}
void f(){}
static void sf2(){}
void f2(){}

int main()
{
	//全局区

	//全局变量、静态变量、常量

	//创建普通局部变量
	int a = 10;
	int b = 10;

	//创建静态变量
	static int s_a = 10;
	static int s_b = 10;
	static int s_c;

    int* p = new int(10); // 返回 int类型 的指针


	//常量

	//1、字符串常量

	//2、const修饰常量（const修饰的全局常量、const修饰的局部变量）

	const int c_l_a = 10;

    // 4.	栈区（Stack）
	cout << "局部常量c_l_a的地址为： \t\t" << (int*)&c_l_a << endl;     //不在全局区，和局部变量在一起
	cout << "局部变量b的地址为： \t\t" << (int*)&b << endl;
	cout << "局部变量a的地址为： \t\t" << (int*)&a << endl;    //观察不同变量的地址空间

    // 3.	堆区（Heap）
	cout << "动态变量指针p的地址为： \t\t" << (int*)p << endl;     //不在全局区，和局部变量在一起

    // 2.	数据区（Data Segment） 
    // bss
	cout << "静态未初s_c的地址为： \t\t" << (int*)&s_c << endl;
	cout << "全局未初g_c的地址为： \t\t" << (int*)&g_c << endl;
    // data
	cout << "静态变量s_b的地址为： \t\t" << (int*)&s_b << endl;
	cout << "静态变量s_a的地址为： \t\t" << (int*)&s_a << endl;
	cout << "全局变量g_b的地址为： \t\t" << (int*)&g_b << endl;
	cout << "全局变量g_a的地址为： \t\t" << (int*)&g_a << endl;

    // 常量区
	cout << "全局常量c_g_a的地址为： \t\t" << (int*)&c_g_a << endl;     //存放在全局区
	cout << "局部字符串常量(同)的地址为： \t\t" << (int*) &"hello world" << endl;
	cout << "全局字符串常量pc2的地址为： \t\t" << (int*) pc2 << endl;
	cout << "全局字符串常量pc 的地址为： \t\t" << (int*) pc << endl;

    // 1.	代码区（Text Segment）
	cout << "普通函数 f2的地址为： \t\t" << (int*)f2 << endl;
	cout << "静态函数sf2的地址为： \t\t" << (int*)sf2 << endl;    //观察不同变量的地址空间
	cout << "普通函数 f的地址为： \t\t" << (int*)f << endl;
	cout << "静态函数sf的地址为： \t\t" << (int*)sf << endl;    //观察不同变量的地址空间

	system("pause");

	return 0;
}
/*
局部常量c_l_a的地址为：		0x7ffe0665b38c ￣￣￣￣￣
局部变量b的地址为：		    0x7ffe0665b388      栈
局部变量a的地址为：		    0x7ffe0665b384 __________
动态变量指针p的地址为：		0x56402cafe2c0 -----堆-----
静态变量s_b的地址为：		0x56402c03201c ￣￣￣￣￣
静态变量s_a的地址为：		0x56402c032018    静态全局 data
全局变量g_b的地址为：		0x56402c032014
全局变量g_a的地址为：		0x56402c032010 __________
字符串常量的地址为：		0x56402c0300ef ￣￣￣￣￣
全局常量c_g_a的地址为：		0x56402c03000c -----常量-----
sh: 1: pause: not found
局部常量c_l_a的地址为：		0x7ffd89ad2e0c ￣￣￣￣￣
局部变量b的地址为：		    0x7ffd89ad2e08      栈
局部变量a的地址为：		    0x7ffd89ad2e04 __________
动态变量指针p的地址为：		0x560c788502c0 -----堆---
静态未初s_c的地址为：		0x560c772e615c ￣￣￣￣￣
全局未初g_c的地址为：		0x560c772e6154    bss
静态变量s_b的地址为：		0x560c772e601c ￣￣￣￣￣
静态变量s_a的地址为：		0x560c772e6018    data
全局变量g_b的地址为：		0x560c772e6014  静态全局 
全局变量g_a的地址为：		0x560c772e6010  __________
字符串常量的地址为：		0x560c772e412f  ￣￣￣￣￣
全局常量c_g_a的地址为：		0x560c772e400c  ----常量---


局部常量c_l_a的地址为：         0x7ffcb84d566c ￣￣￣￣￣
局部变量b的地址为：             0x7ffcb84d5668      栈
局部变量a的地址为：             0x7ffcb84d5664 __________
动态变量指针p的地址为：         0x55d8428a7eb0 -----堆-----
静态未初s_c的地址为：           0x55d841d5615c ￣￣￣￣￣
全局未初g_c的地址为：           0x55d841d56154      bss
静态变量s_b的地址为：           0x55d841d5601c      data
静态变量s_a的地址为：           0x55d841d56018 
全局变量g_b的地址为：           0x55d841d56014
全局变量g_a的地址为：           0x55d841d56010 __________
全局常量c_g_a的地址为：         0x55d841d54020 ￣￣￣￣￣
局部字符串常量(同)的地址为：     0x55d841d54014
全局字符串常量pc2的地址为：      0x55d841d54014    常量
全局字符串常量pc 的地址为：      0x55d841d54009 __________
普通函数 f2的地址为：           0x55d841d5324a ￣￣￣￣￣
静态函数sf2的地址为：           0x55d841d5323f   代码区
普通函数 f的地址为：            0x55d841d53234
静态函数sf的地址为：            0x55d841d53229 __________
*/
//总结：

//全局区：全局变量、静态变量、const修饰全局常量、字符串常量